buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url INTRANET_MAVEN_URL
            credentials {
                username INTRANET_MAVEN_USERNAME
                password INTRANET_MAVEN_PASSWORD
            }
        }
    }
    dependencies { classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5' }
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.17.1' // CURRENT_GRPC_VERSION
def nettyTcNativeVersion = '2.0.17.Final'
def protobufVersion = '3.5.1'
def protocVersion = '3.5.1-1'

dependencies {
    compile project(':orientsec-grpc-netty'),
            project(':orientsec-grpc-protobuf'),
            project(':orientsec-grpc-stub'),
            project(':orientsec-grpc-services')

    compile ("ch.qos.logback:logback-classic:1.2.3")  {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    compile (libraries.protobuf_util) {
        // prefer 20.0 from libraries instead of 19.0
        exclude group: 'com.google.guava', module: 'guava'
    }

    testCompile libraries.junit
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}


// Generate IntelliJ IDEA's .idea & .iml project files
apply plugin: 'idea'

// Provide convenience executables for trying out the examples.
apply plugin: 'application'


// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

task copyShell {
    def shell = file("$buildDir/shell")
    outputs.dir shell
    doLast {
        shell.mkdirs()
        copy {
            from "${projectDir}/src/shell"
            into "$shell"
        }
    }
}

task helloWorldServer(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.HelloWorldServer'
    applicationName = 'hello-world-server'
    outputDir = new File(project.buildDir, 'tmp/script1')
    classpath = jar.outputs.files + project.configurations.runtime
}

task helloWorldClient(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.HelloWorldClient'
    applicationName = 'hello-world-client'
    outputDir = new File(project.buildDir, 'tmp/script2')
    classpath = jar.outputs.files + project.configurations.runtime
}

task twoServicesServer(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.TwoServicesServer'
    applicationName = 'two-services-server'
    outputDir = new File(project.buildDir, 'tmp/script3')
    classpath = jar.outputs.files + project.configurations.runtime
}

task longTimeHelloClient(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.LongTimeHelloClient'
    applicationName = 'long-time-hello-client'
    outputDir = new File(project.buildDir, 'tmp/script4')
    classpath = jar.outputs.files + project.configurations.runtime
}

task shortTimeHelloClient(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.ShortTimeHelloClient'
    applicationName = 'short-time-hello-client'
    outputDir = new File(project.buildDir, 'tmp/script5')
    classpath = jar.outputs.files + project.configurations.runtime
}

task testLbClient(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.TestLbClient'
    applicationName = 'test-lb-client'
    outputDir = new File(project.buildDir, 'tmp/script6')
    classpath = jar.outputs.files + project.configurations.runtime
}

task testTimeoutClient(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.TestTimeoutClient'
    applicationName = 'test-timeout-client'
    outputDir = new File(project.buildDir, 'tmp/script7')
    classpath = jar.outputs.files + project.configurations.runtime
}

task performanceClient(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.PerformanceClient'
    applicationName = 'performance-client'
    outputDir = new File(project.buildDir, 'tmp/script8')
    classpath = jar.outputs.files + project.configurations.runtime
}

task routeClient(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.routeguide.RouteGuideClient'
    applicationName = 'route-client'
    outputDir = new File(project.buildDir, 'tmp/script9')
    classpath = jar.outputs.files + project.configurations.runtime
}

task routeServer(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.routeguide.RouteGuideServer'
    applicationName = 'route-server'
    outputDir = new File(project.buildDir, 'tmp/script10')
    classpath = jar.outputs.files + project.configurations.runtime
}

task clientBreaker(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.ClientBreaker'
    applicationName = 'client-breaker'
    outputDir = new File(project.buildDir, 'tmp/script11')
    classpath = jar.outputs.files + project.configurations.runtime
}

task errorServer(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.ServerWithError'
    applicationName = 'server-with-error'
    outputDir = new File(project.buildDir, 'tmp/script12')
    classpath = jar.outputs.files + project.configurations.runtime
}

task testPayClient(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.TestPayClient'
    applicationName = 'test-pay-client'
    outputDir = new File(project.buildDir, 'tmp/script13')
    classpath = jar.outputs.files + project.configurations.runtime
}

task clientWithDeadline(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.ClientWithDeadline'
    applicationName = 'client-with-deadline'
    outputDir = new File(project.buildDir, 'tmp/script14')
    classpath = jar.outputs.files + project.configurations.runtime
}

task helloWorldServerSleep(type: CreateStartScripts) {
    mainClassName = 'com.orientsec.grpc.examples.helloworld.HelloWorldServerSleep'
    applicationName = 'server-sleep'
    outputDir = new File(project.buildDir, 'tmp/script15')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(copyShell)
    from(helloWorldServer)
    from(helloWorldClient)
    from(twoServicesServer)
    from(longTimeHelloClient)
    from(shortTimeHelloClient)
    from(testLbClient)
    from(testTimeoutClient)
    from(performanceClient)
    from(routeClient)
    from(routeServer)
    from(clientBreaker)
    from(errorServer)
    from(testPayClient)
    from(clientWithDeadline)
    from(helloWorldServerSleep)
    fileMode = 0755
}


task createConfigFile {
    def config = file("$buildDir/config")
    outputs.dir config
    doLast {
        config.mkdirs()
        copy {
            from "${projectDir}/../config/dfzq-grpc-config.properties"
            into "$config"
        }
    }
}

distributions {
    main {
        contents {
            from(createConfigFile) { into "config" }
        }
    }
}

