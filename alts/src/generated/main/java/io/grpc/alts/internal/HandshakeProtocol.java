// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/gcp/handshaker.proto

package io.grpc.alts.internal;

/**
 * Protobuf enum {@code grpc.gcp.HandshakeProtocol}
 */
public enum HandshakeProtocol
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Default value.
   * </pre>
   *
   * <code>HANDSHAKE_PROTOCOL_UNSPECIFIED = 0;</code>
   */
  HANDSHAKE_PROTOCOL_UNSPECIFIED(0),
  /**
   * <pre>
   * TLS handshake protocol.
   * </pre>
   *
   * <code>TLS = 1;</code>
   */
  TLS(1),
  /**
   * <pre>
   * Application Layer Transport Security handshake protocol.
   * </pre>
   *
   * <code>ALTS = 2;</code>
   */
  ALTS(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Default value.
   * </pre>
   *
   * <code>HANDSHAKE_PROTOCOL_UNSPECIFIED = 0;</code>
   */
  public static final int HANDSHAKE_PROTOCOL_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * TLS handshake protocol.
   * </pre>
   *
   * <code>TLS = 1;</code>
   */
  public static final int TLS_VALUE = 1;
  /**
   * <pre>
   * Application Layer Transport Security handshake protocol.
   * </pre>
   *
   * <code>ALTS = 2;</code>
   */
  public static final int ALTS_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static HandshakeProtocol valueOf(int value) {
    return forNumber(value);
  }

  public static HandshakeProtocol forNumber(int value) {
    switch (value) {
      case 0: return HANDSHAKE_PROTOCOL_UNSPECIFIED;
      case 1: return TLS;
      case 2: return ALTS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<HandshakeProtocol>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      HandshakeProtocol> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<HandshakeProtocol>() {
          public HandshakeProtocol findValueByNumber(int number) {
            return HandshakeProtocol.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.grpc.alts.internal.HandshakerProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final HandshakeProtocol[] VALUES = values();

  public static HandshakeProtocol valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private HandshakeProtocol(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:grpc.gcp.HandshakeProtocol)
}

