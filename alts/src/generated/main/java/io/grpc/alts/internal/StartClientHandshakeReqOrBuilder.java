// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/gcp/handshaker.proto

package io.grpc.alts.internal;

public interface StartClientHandshakeReqOrBuilder extends
    // @@protoc_insertion_point(interface_extends:grpc.gcp.StartClientHandshakeReq)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Handshake security protocol requested by the client.
   * </pre>
   *
   * <code>.grpc.gcp.HandshakeProtocol handshake_security_protocol = 1;</code>
   */
  int getHandshakeSecurityProtocolValue();
  /**
   * <pre>
   * Handshake security protocol requested by the client.
   * </pre>
   *
   * <code>.grpc.gcp.HandshakeProtocol handshake_security_protocol = 1;</code>
   */
  io.grpc.alts.internal.HandshakeProtocol getHandshakeSecurityProtocol();

  /**
   * <pre>
   * The application protocols supported by the client, e.g., "h2" (for http2),
   * "grpc".
   * </pre>
   *
   * <code>repeated string application_protocols = 2;</code>
   */
  java.util.List<java.lang.String>
      getApplicationProtocolsList();
  /**
   * <pre>
   * The application protocols supported by the client, e.g., "h2" (for http2),
   * "grpc".
   * </pre>
   *
   * <code>repeated string application_protocols = 2;</code>
   */
  int getApplicationProtocolsCount();
  /**
   * <pre>
   * The application protocols supported by the client, e.g., "h2" (for http2),
   * "grpc".
   * </pre>
   *
   * <code>repeated string application_protocols = 2;</code>
   */
  java.lang.String getApplicationProtocols(int index);
  /**
   * <pre>
   * The application protocols supported by the client, e.g., "h2" (for http2),
   * "grpc".
   * </pre>
   *
   * <code>repeated string application_protocols = 2;</code>
   */
  com.google.protobuf.ByteString
      getApplicationProtocolsBytes(int index);

  /**
   * <pre>
   * The record protocols supported by the client, e.g.,
   * "ALTSRP_GCM_AES128".
   * </pre>
   *
   * <code>repeated string record_protocols = 3;</code>
   */
  java.util.List<java.lang.String>
      getRecordProtocolsList();
  /**
   * <pre>
   * The record protocols supported by the client, e.g.,
   * "ALTSRP_GCM_AES128".
   * </pre>
   *
   * <code>repeated string record_protocols = 3;</code>
   */
  int getRecordProtocolsCount();
  /**
   * <pre>
   * The record protocols supported by the client, e.g.,
   * "ALTSRP_GCM_AES128".
   * </pre>
   *
   * <code>repeated string record_protocols = 3;</code>
   */
  java.lang.String getRecordProtocols(int index);
  /**
   * <pre>
   * The record protocols supported by the client, e.g.,
   * "ALTSRP_GCM_AES128".
   * </pre>
   *
   * <code>repeated string record_protocols = 3;</code>
   */
  com.google.protobuf.ByteString
      getRecordProtocolsBytes(int index);

  /**
   * <pre>
   * (Optional) Describes which server identities are acceptable by the client.
   * If target identities are provided and none of them matches the peer
   * identity of the server, handshake will fail.
   * </pre>
   *
   * <code>repeated .grpc.gcp.Identity target_identities = 4;</code>
   */
  java.util.List<io.grpc.alts.internal.Identity> 
      getTargetIdentitiesList();
  /**
   * <pre>
   * (Optional) Describes which server identities are acceptable by the client.
   * If target identities are provided and none of them matches the peer
   * identity of the server, handshake will fail.
   * </pre>
   *
   * <code>repeated .grpc.gcp.Identity target_identities = 4;</code>
   */
  io.grpc.alts.internal.Identity getTargetIdentities(int index);
  /**
   * <pre>
   * (Optional) Describes which server identities are acceptable by the client.
   * If target identities are provided and none of them matches the peer
   * identity of the server, handshake will fail.
   * </pre>
   *
   * <code>repeated .grpc.gcp.Identity target_identities = 4;</code>
   */
  int getTargetIdentitiesCount();
  /**
   * <pre>
   * (Optional) Describes which server identities are acceptable by the client.
   * If target identities are provided and none of them matches the peer
   * identity of the server, handshake will fail.
   * </pre>
   *
   * <code>repeated .grpc.gcp.Identity target_identities = 4;</code>
   */
  java.util.List<? extends io.grpc.alts.internal.IdentityOrBuilder> 
      getTargetIdentitiesOrBuilderList();
  /**
   * <pre>
   * (Optional) Describes which server identities are acceptable by the client.
   * If target identities are provided and none of them matches the peer
   * identity of the server, handshake will fail.
   * </pre>
   *
   * <code>repeated .grpc.gcp.Identity target_identities = 4;</code>
   */
  io.grpc.alts.internal.IdentityOrBuilder getTargetIdentitiesOrBuilder(
      int index);

  /**
   * <pre>
   * (Optional) Application may specify a local identity. Otherwise, the
   * handshaker chooses a default local identity.
   * </pre>
   *
   * <code>.grpc.gcp.Identity local_identity = 5;</code>
   */
  boolean hasLocalIdentity();
  /**
   * <pre>
   * (Optional) Application may specify a local identity. Otherwise, the
   * handshaker chooses a default local identity.
   * </pre>
   *
   * <code>.grpc.gcp.Identity local_identity = 5;</code>
   */
  io.grpc.alts.internal.Identity getLocalIdentity();
  /**
   * <pre>
   * (Optional) Application may specify a local identity. Otherwise, the
   * handshaker chooses a default local identity.
   * </pre>
   *
   * <code>.grpc.gcp.Identity local_identity = 5;</code>
   */
  io.grpc.alts.internal.IdentityOrBuilder getLocalIdentityOrBuilder();

  /**
   * <pre>
   * (Optional) Local endpoint information of the connection to the server,
   * such as local IP address, port number, and network protocol.
   * </pre>
   *
   * <code>.grpc.gcp.Endpoint local_endpoint = 6;</code>
   */
  boolean hasLocalEndpoint();
  /**
   * <pre>
   * (Optional) Local endpoint information of the connection to the server,
   * such as local IP address, port number, and network protocol.
   * </pre>
   *
   * <code>.grpc.gcp.Endpoint local_endpoint = 6;</code>
   */
  io.grpc.alts.internal.Endpoint getLocalEndpoint();
  /**
   * <pre>
   * (Optional) Local endpoint information of the connection to the server,
   * such as local IP address, port number, and network protocol.
   * </pre>
   *
   * <code>.grpc.gcp.Endpoint local_endpoint = 6;</code>
   */
  io.grpc.alts.internal.EndpointOrBuilder getLocalEndpointOrBuilder();

  /**
   * <pre>
   * (Optional) Endpoint information of the remote server, such as IP address,
   * port number, and network protocol.
   * </pre>
   *
   * <code>.grpc.gcp.Endpoint remote_endpoint = 7;</code>
   */
  boolean hasRemoteEndpoint();
  /**
   * <pre>
   * (Optional) Endpoint information of the remote server, such as IP address,
   * port number, and network protocol.
   * </pre>
   *
   * <code>.grpc.gcp.Endpoint remote_endpoint = 7;</code>
   */
  io.grpc.alts.internal.Endpoint getRemoteEndpoint();
  /**
   * <pre>
   * (Optional) Endpoint information of the remote server, such as IP address,
   * port number, and network protocol.
   * </pre>
   *
   * <code>.grpc.gcp.Endpoint remote_endpoint = 7;</code>
   */
  io.grpc.alts.internal.EndpointOrBuilder getRemoteEndpointOrBuilder();

  /**
   * <pre>
   * (Optional) If target name is provided, a secure naming check is performed
   * to verify that the peer authenticated identity is indeed authorized to run
   * the target name.
   * </pre>
   *
   * <code>string target_name = 8;</code>
   */
  java.lang.String getTargetName();
  /**
   * <pre>
   * (Optional) If target name is provided, a secure naming check is performed
   * to verify that the peer authenticated identity is indeed authorized to run
   * the target name.
   * </pre>
   *
   * <code>string target_name = 8;</code>
   */
  com.google.protobuf.ByteString
      getTargetNameBytes();

  /**
   * <pre>
   * (Optional) RPC protocol versions supported by the client.
   * </pre>
   *
   * <code>.grpc.gcp.RpcProtocolVersions rpc_versions = 9;</code>
   */
  boolean hasRpcVersions();
  /**
   * <pre>
   * (Optional) RPC protocol versions supported by the client.
   * </pre>
   *
   * <code>.grpc.gcp.RpcProtocolVersions rpc_versions = 9;</code>
   */
  io.grpc.alts.internal.RpcProtocolVersions getRpcVersions();
  /**
   * <pre>
   * (Optional) RPC protocol versions supported by the client.
   * </pre>
   *
   * <code>.grpc.gcp.RpcProtocolVersions rpc_versions = 9;</code>
   */
  io.grpc.alts.internal.RpcProtocolVersionsOrBuilder getRpcVersionsOrBuilder();
}
